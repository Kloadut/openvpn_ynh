#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
dedicated_ip=$YNH_APP_ARG_DEDICATED_IP
ip4ranges=$YNH_APP_ARG_IP4RANGES

app=$YNH_APP_INSTANCE_NAME
user=$app
webuser="${user}web"

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THIS ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --time --weight=1

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

# Check if iptables is working
if ! iptables -L > /dev/null 2>&1
then
    ynh_die --message="iptables is not available in your environment, aborting..."
fi

ynh_script_progression --message="Checking if tun interface is available..." --time --weight=1
# Ensure that tun device is still available, otherwise try to create it manually
if [ ! -c /dev/net/tun ]
then
    mkdir -p /dev/net
    mknod /dev/net/tun c 10 200
    chmod 666 /dev/net/tun
fi

ynh_script_progression --message="Checking if IPv4 range argument..." --time --weight=1
# Check IPv4 range argument
_255='(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)'
ip4regex=(${_255}\.){3}${_255}
rangeip4regex="${ip4regex}(/(3[0-2]|[1-2][0-9]|[1-9]))?"
regex="${rangeip4regex}([[:space:]]+${rangeip4regex})*"
if [[ $ip4ranges =~ ^${regex}$ ]]
then
    echo "IPv4 ranges format ok"
else
    ynh_die --message="Bad Ipv4 ranges format, aborting..."
fi

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --time --weight=1

ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path_url"
ynh_app_setting_set "$app" final_path "$final_path"
ynh_app_setting_set "$app" dedicated_ip "$dedicated_ip"
ynh_app_setting_set "$app" ip4ranges "$ip4ranges"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Setting the port..." --time --weight=1

# Find a free port
port=$(ynh_find_port 1194)

# Open this port
ynh_exec_warn_less yunohost firewall allow --no-upnp TCP $port

# Save setting
ynh_app_setting_set "$app" port "$port"

#=================================================
# FIND THE DEFAULT INTERFACE
#=================================================
ynh_script_progression --message="Setting the interface..." --time --weight=1

# Find the interface
iface=$(ip r|awk '/default/ { print $5 }')

# Save setting
ynh_app_setting_set "$app" iface "$iface"

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..." --time --weight=1

ynh_install_app_dependencies "$pkg_dependencies"

#=================================================
# REGISTER OPENVPN SERVICE ON ADMIN PANEL
#=================================================
ynh_script_progression --message="Registering openvpn as a YunoHost service..." --time --weight=1

yunohost service add openvpn --log /var/log/openvpn/status.log --description "OpenVPN server"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring nginx web server..." --time --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --time --weight=1

# Create a system user
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring php-fpm..." --time --weight=1

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SETUP THE APP BY MODIFYING THE SYSTEM
#=================================================
ynh_script_progression --message="Generate dhparam file, this step may be long..." --time --weight=3

# Create DH for main domain
dh_size=2048
openssl dhparam -out "/etc/openvpn/dh.pem" $dh_size -dsaparam > /dev/null
openvpn --genkey --secret /etc/openvpn/ta.key

# Install configured files and restart services
ynh_script_progression --message="Setup openvpn and restart..." --time --weight=1
setup_and_restart

# Ensure that tun device is still available, otherwise try to create it manually
if [ ! -c /dev/net/tun ]
then
    mkdir -p /dev/net
    mknod /dev/net/tun c 10 200
    chmod 666 /dev/net/tun
fi

# Add masquerade rules
add_firewall_rules

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Secure files and directories..." --time --weight=1

### For security reason, any app should set the permissions to root: before anything else.
### Then, if write authorization is needed, any access should be given only to directories
### that really need such authorization.

# Set permissions to app files
chown -R root: $final_path

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..." --time --weight=1

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting openvpn systemd service..." --time --weight=1

# Start a systemd service
ynh_systemd_action --service_name=openvpn --action="start"

#=================================================
# SETUP FAIL2BAN
#=================================================
ynh_script_progression --message="Configuring fail2ban..." --time --weight=1

# Create a dedicated fail2ban config
ynh_add_fail2ban_config --use_template --others_var="app port"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --time --weight=1

ynh_app_setting_set --app=$app --key=final_path --value=$final_path

mkdir -p "$final_path"
# Copy extra source files
cp -a $YNH_CWD/../sources/. "$final_path"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# RELOAD PHP
#=================================================
ynh_script_progression --message="Reloading php-fpm..." --time --weight=1

ynh_systemd_action --service_name=php7.0-fpm --action=reload

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Installation of $app completed" --time --last
